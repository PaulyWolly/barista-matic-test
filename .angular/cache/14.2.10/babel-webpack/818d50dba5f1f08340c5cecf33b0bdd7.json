{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar Observable_1 = require(\"../Observable\");\nvar isScheduler_1 = require(\"../util/isScheduler\");\nvar mergeAll_1 = require(\"../operators/mergeAll\");\nvar fromArray_1 = require(\"./fromArray\");\nfunction merge() {\n  var observables = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    observables[_i] = arguments[_i];\n  }\n  var concurrent = Number.POSITIVE_INFINITY;\n  var scheduler = null;\n  var last = observables[observables.length - 1];\n  if (isScheduler_1.isScheduler(last)) {\n    scheduler = observables.pop();\n    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n      concurrent = observables.pop();\n    }\n  } else if (typeof last === 'number') {\n    concurrent = observables.pop();\n  }\n  if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable_1.Observable) {\n    return observables[0];\n  }\n  return mergeAll_1.mergeAll(concurrent)(fromArray_1.fromArray(observables, scheduler));\n}\nexports.merge = merge;","map":{"version":3,"names":["Object","defineProperty","exports","value","Observable_1","require","isScheduler_1","mergeAll_1","fromArray_1","merge","observables","_i","arguments","length","concurrent","Number","POSITIVE_INFINITY","scheduler","last","isScheduler","pop","Observable","mergeAll","fromArray"],"sources":["C:/projects/ANGULAR/Barista-matic-main/node_modules/rxjs/internal/observable/merge.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../Observable\");\nvar isScheduler_1 = require(\"../util/isScheduler\");\nvar mergeAll_1 = require(\"../operators/mergeAll\");\nvar fromArray_1 = require(\"./fromArray\");\nfunction merge() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i] = arguments[_i];\n    }\n    var concurrent = Number.POSITIVE_INFINITY;\n    var scheduler = null;\n    var last = observables[observables.length - 1];\n    if (isScheduler_1.isScheduler(last)) {\n        scheduler = observables.pop();\n        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n            concurrent = observables.pop();\n        }\n    }\n    else if (typeof last === 'number') {\n        concurrent = observables.pop();\n    }\n    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable_1.Observable) {\n        return observables[0];\n    }\n    return mergeAll_1.mergeAll(concurrent)(fromArray_1.fromArray(observables, scheduler));\n}\nexports.merge = merge;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,IAAIC,YAAY,GAAGC,OAAO,CAAC,eAAe,CAAC;AAC3C,IAAIC,aAAa,GAAGD,OAAO,CAAC,qBAAqB,CAAC;AAClD,IAAIE,UAAU,GAAGF,OAAO,CAAC,uBAAuB,CAAC;AACjD,IAAIG,WAAW,GAAGH,OAAO,CAAC,aAAa,CAAC;AACxC,SAASI,KAAK,GAAG;EACb,IAAIC,WAAW,GAAG,EAAE;EACpB,KAAK,IAAIC,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAGC,SAAS,CAACC,MAAM,EAAEF,EAAE,EAAE,EAAE;IAC1CD,WAAW,CAACC,EAAE,CAAC,GAAGC,SAAS,CAACD,EAAE,CAAC;EACnC;EACA,IAAIG,UAAU,GAAGC,MAAM,CAACC,iBAAiB;EACzC,IAAIC,SAAS,GAAG,IAAI;EACpB,IAAIC,IAAI,GAAGR,WAAW,CAACA,WAAW,CAACG,MAAM,GAAG,CAAC,CAAC;EAC9C,IAAIP,aAAa,CAACa,WAAW,CAACD,IAAI,CAAC,EAAE;IACjCD,SAAS,GAAGP,WAAW,CAACU,GAAG,EAAE;IAC7B,IAAIV,WAAW,CAACG,MAAM,GAAG,CAAC,IAAI,OAAOH,WAAW,CAACA,WAAW,CAACG,MAAM,GAAG,CAAC,CAAC,KAAK,QAAQ,EAAE;MACnFC,UAAU,GAAGJ,WAAW,CAACU,GAAG,EAAE;IAClC;EACJ,CAAC,MACI,IAAI,OAAOF,IAAI,KAAK,QAAQ,EAAE;IAC/BJ,UAAU,GAAGJ,WAAW,CAACU,GAAG,EAAE;EAClC;EACA,IAAIH,SAAS,KAAK,IAAI,IAAIP,WAAW,CAACG,MAAM,KAAK,CAAC,IAAIH,WAAW,CAAC,CAAC,CAAC,YAAYN,YAAY,CAACiB,UAAU,EAAE;IACrG,OAAOX,WAAW,CAAC,CAAC,CAAC;EACzB;EACA,OAAOH,UAAU,CAACe,QAAQ,CAACR,UAAU,CAAC,CAACN,WAAW,CAACe,SAAS,CAACb,WAAW,EAAEO,SAAS,CAAC,CAAC;AACzF;AACAf,OAAO,CAACO,KAAK,GAAGA,KAAK"},"metadata":{},"sourceType":"script"}