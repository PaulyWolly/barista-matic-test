{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/drink.service\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/common\";\nfunction OrderInventoryComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.updateMessage, \"\\n\");\n  }\n}\nexport class OrderInventoryComponent {\n  constructor(drinkService, http) {\n    this.drinkService = drinkService;\n    this.http = http;\n    this.currentUnitsOnHand = [];\n    this.showMessage = false;\n    this.updateMessage = 'Updating... click \"Refresh\" to see updated units.';\n  }\n  ngOnInit() {}\n  getCurrentUnitsOnHand() {\n    this.drinkService.getInventoryItems().subscribe(res => {\n      console.log('allCurrentItems: =====> ', res);\n      for (let key in res) {\n        console.log(key + \": \" + res[key].unitsOnHand);\n        if (res[key].unitsOnHand < 10) {\n          console.log(\"less than 10\");\n          res[key].unitsOnHand = 10;\n        }\n      }\n    });\n  }\n  addAllUnits() {\n    console.log('AddAllUnits called');\n    this.showMessage = true;\n    const refillCount = 10;\n    this.http.put('http://localhost:8080/inventoryItems', {\n      id: 0,\n      name: '',\n      unitsOnHand: refillCount\n    }).subscribe(data => this.items = data.unitsOnHand);\n    // .subscribe((res) => {\n    //   this.postId = res;\n    // })\n    //   async function fetchData() {\n    //     const response = await fetch('http://localhost:3000/users/');\n    //     const data = await response.json();\n    //     data.forEach(obj: InventoryItemInterface => {\n    //         Object.entries(obj).forEach(([key, value]) => {\n    //             console.log(`${key} ${value}`);\n    //             if (value < 10 ) {\n    //               value = 10\n    //             }\n    //         });\n    //         console.log('-------------------');\n    //     });\n    // }\n    //   this.http.get<InventoryItemInterface>('http://localhost:8080/inventoryItems')\n    //     .subscribe((res: InventoryItemInterface) => {\n    //       // const response = await fetch('http://localhost:8080/inventoryItems/');\n    //       // const data = await response.json();\n    //       res.forEach((res: InventoryItemInterface) => {\n    //           Object.entries(res).forEach(([key, value]) => {\n    //               console.log(`${key} ${value}`);\n    //               if (value < 10) {\n    //                 value = 10\n    //               }\n    //           });\n    //           console.log('-------------------');\n    //           console.log(\"original items: \", res)\n    //       });\n    //   }\n    //   for (let keyName in JSON) {\n    //     let value = json[keyName]\n    //     if (value === '') {\n    //         json[keyName] = keyName\n    //     }\n    // }\n    // console.log(\"after changed items: \", this.items)\n    // const item1Body = { id: 1, name: 'Coffee', unitsOnHand: refillCount };\n    // this.http.put<InventoryItemInterface>('http://localhost:8080/inventoryItems/1', item1Body)\n    // .subscribe(data => this.postId = data.id );\n    // const item2Body = { id: 2, name: 'Decaf Coffee', unitsOnHand: refillCount };\n    // this.http.put<InventoryItemInterface>('http://localhost:8080/inventoryItems/2', item2Body)\n    // .subscribe(data => this.postId = data.id);\n    // const item3Body = { id: 3, name: 'Sugar', unitsOnHand: refillCount };\n    // this.http.put<InventoryItemInterface>('http://localhost:8080/inventoryItems/3', item3Body)\n    // .subscribe(data => this.postId = data.id);\n    // const item4Body = { id: 4, name: 'Cream', unitsOnHand: refillCount };\n    // this.http.put<InventoryItemInterface>('http://localhost:8080/inventoryItems/4', item4Body)\n    // .subscribe(data => this.postId = data.id);\n    // const item5Body = { id: 5, name: 'Steamed Milk', unitsOnHand: refillCount };\n    // this.http.put<InventoryItemInterface>('http://localhost:8080/inventoryItems/5', item5Body)\n    // .subscribe(data => this.postId = data.id);\n    // const item6Body = { id: 6, name: 'Foamed Milk', unitsOnHand: refillCount };\n    // this.http.put<InventoryItemInterface>('http://localhost:8080/inventoryItems/6', item6Body)\n    // .subscribe(data => this.postId = data.id);\n    // const item7Body = { id: 7, name: 'Espresso', unitsOnHand: refillCount };\n    // this.http.put<InventoryItemInterface>('http://localhost:8080/inventoryItems/7', item7Body)\n    // .subscribe(data => this.postId = data.id);\n    // const item8Body = { id: 8, name: 'Cocoa', unitsOnHand: refillCount };\n    // this.http.put<InventoryItemInterface>('http://localhost:8080/inventoryItems/8', item8Body)\n    // .subscribe(data => this.postId = data.id);\n    // const item9Body = { id: 9, name: 'Whipped Cream', unitsOnHand: refillCount };\n    // this.http.put<InventoryItemInterface>('http://localhost:8080/inventoryItems/9', item9Body)\n    // .subscribe(data => this.postId = data.id);\n    // this.ngOnInit();\n    //)}\n  }\n}\n\nOrderInventoryComponent.ɵfac = function OrderInventoryComponent_Factory(t) {\n  return new (t || OrderInventoryComponent)(i0.ɵɵdirectiveInject(i1.DrinkService), i0.ɵɵdirectiveInject(i2.HttpClient));\n};\nOrderInventoryComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: OrderInventoryComponent,\n  selectors: [[\"app-order-inventory\"]],\n  decls: 11,\n  vars: 1,\n  consts: [[1, \"table\", \"table-bordered\"], [\"scope\", \"col\", 1, \"uc-title\"], [1, \"fillUp-btn\", \"btn\", \"btn-sm\", \"btn-primary\", 3, \"click\"], [\"class\", \"update-message\", 4, \"ngIf\"], [1, \"update-message\"]],\n  template: function OrderInventoryComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h3\");\n      i0.ɵɵtext(1, \"Order Inventory\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"table\", 0)(3, \"thead\")(4, \"tr\")(5, \"th\", 1);\n      i0.ɵɵtext(6, \"Units to Order\\u00A0\\u00A0 \");\n      i0.ɵɵelementStart(7, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function OrderInventoryComponent_Template_button_click_7_listener() {\n        return ctx.addAllUnits();\n      });\n      i0.ɵɵtext(8, \"Refill\");\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵelement(9, \"tbody\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(10, OrderInventoryComponent_div_10_Template, 2, 1, \"div\", 3);\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(10);\n      i0.ɵɵproperty(\"ngIf\", ctx.showMessage);\n    }\n  },\n  dependencies: [i3.NgIf],\n  styles: [\"table[_ngcontent-%COMP%] {\\r\\n  border: 1px solid #808080;\\r\\n}\\r\\n\\r\\ntable[_ngcontent-%COMP%]   thead[_ngcontent-%COMP%]   .uc-title[_ngcontent-%COMP%], .ingredient-title[_ngcontent-%COMP%], .is-title[_ngcontent-%COMP%] {\\r\\n  background-color: rgb(88, 88, 88);\\r\\n  color: #c8c7c7;\\r\\n  font-weight:400 !important;\\r\\n}\\r\\n\\r\\n.fillUp-btn[_ngcontent-%COMP%] {\\r\\n  position: absolute;\\r\\n  top: 48px;\\r\\n  right: 20px;\\r\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm9yZGVyLWludmVudG9yeS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UseUJBQXlCO0FBQzNCOztBQUVBO0VBQ0UsaUNBQWlDO0VBQ2pDLGNBQWM7RUFDZCwwQkFBMEI7QUFDNUI7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsU0FBUztFQUNULFdBQVc7QUFDYiIsImZpbGUiOiJvcmRlci1pbnZlbnRvcnkuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbInRhYmxlIHtcclxuICBib3JkZXI6IDFweCBzb2xpZCAjODA4MDgwO1xyXG59XHJcblxyXG50YWJsZSB0aGVhZCAudWMtdGl0bGUsIC5pbmdyZWRpZW50LXRpdGxlLCAuaXMtdGl0bGUge1xyXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYig4OCwgODgsIDg4KTtcclxuICBjb2xvcjogI2M4YzdjNztcclxuICBmb250LXdlaWdodDo0MDAgIWltcG9ydGFudDtcclxufVxyXG5cclxuLmZpbGxVcC1idG4ge1xyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICB0b3A6IDQ4cHg7XHJcbiAgcmlnaHQ6IDIwcHg7XHJcbn1cclxuIl19 */\"]\n});","map":{"version":3,"mappings":";;;;;;IAaAA,8BAAgD;IAC9CA,YACF;IAAAA,iBAAM;;;;IADJA,eACF;IADEA,sDACF;;;ACLA,OAAM,MAAOC,uBAAuB;EAQlCC,YACUC,YAA0B,EAC1BC,IAAgB;IADhB,iBAAY,GAAZD,YAAY;IACZ,SAAI,GAAJC,IAAI;IATd,uBAAkB,GAA6B,EAAE;IAI1C,gBAAW,GAAY,KAAK;IACnC,kBAAa,GAAQ,mDAAmD;EAKpE;EAEJC,QAAQ,IACR;EAEAC,qBAAqB;IACnB,IAAI,CAACH,YAAY,CAACI,iBAAiB,EAAE,CAClCC,SAAS,CAACC,GAAG,IAAG;MACfC,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEF,GAAG,CAAC;MAG5C,KAAK,IAAIG,GAAG,IAAIH,GAAG,EAAE;QACnBC,OAAO,CAACC,GAAG,CAACC,GAAG,GAAG,IAAI,GAAGH,GAAG,CAACG,GAAG,CAAC,CAACC,WAAW,CAAC;QAC9C,IAAIJ,GAAG,CAACG,GAAG,CAAC,CAACC,WAAW,GAAG,EAAE,EAAE;UAC7BH,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;UAC3BF,GAAG,CAACG,GAAG,CAAC,CAACC,WAAW,GAAG,EAAE;;;IAKjC,CAAC,CAAC;EACJ;EAEAC,WAAW;IACTJ,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;IACjC,IAAI,CAACI,WAAW,GAAG,IAAI;IAEvB,MAAMC,WAAW,GAAG,EAAE;IAEtB,IAAI,CAACZ,IAAI,CAACa,GAAG,CAAyB,sCAAsC,EAAE;MAACC,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE,EAAE;MAAEN,WAAW,EAAEG;IAAW,CAAC,CAAC,CACzHR,SAAS,CAACY,IAAI,IAAI,IAAI,CAACC,KAAK,GAAGD,IAAI,CAACP,WAAW,CAAE;IAClD;IACA;IACA;IAEF;IAEA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IAEA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAKE;IACA;IACA;IACA;IACA;IACA;IACA;IAGA;IACA;IACA;IAEA;IACA;IACA;IAEA;IACA;IACA;IAEA;IACA;IACA;IAEA;IACA;IACA;IAEA;IACA;IACA;IAEA;IACA;IACA;IAEA;IACA;IACA;IAEA;IACA;IACA;IAEA;IAEA;EAEJ;;;;mBApIaZ,uBAAuB;AAAA;;QAAvBA,uBAAuB;EAAAqB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDVpC1B,0BAAI;MAAAA,+BAAe;MAAAA,iBAAK;MACxBA,gCAAoC;MAGGA,2CACjC;MAAAA,iCAA2E;MAAxBA;QAAA,OAAS2B,iBAAa;MAAA,EAAC;MAAC3B,sBAAM;MAAAA,iBAAS;MAI9FA,wBAEQ;MACVA,iBAAQ;MACRA,0EAEM;;;MAFuBA,gBAAiB;MAAjBA,sCAAiB","names":["i0","OrderInventoryComponent","constructor","drinkService","http","ngOnInit","getCurrentUnitsOnHand","getInventoryItems","subscribe","res","console","log","key","unitsOnHand","addAllUnits","showMessage","refillCount","put","id","name","data","items","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\projects\\ANGULAR\\Barista-matic-main-original\\src\\app\\components\\order-inventory\\order-inventory.component.html","C:\\projects\\ANGULAR\\Barista-matic-main-original\\src\\app\\components\\order-inventory\\order-inventory.component.ts"],"sourcesContent":["<h3>Order Inventory</h3>\r\n<table class=\"table table-bordered\">\r\n  <thead >\r\n    <tr >\r\n      <th class=\"uc-title\" scope=\"col\">Units to Order&nbsp;&nbsp;\r\n      <button class=\" fillUp-btn btn btn-sm btn-primary\" (click)=\"addAllUnits()\">Refill</button>\r\n    </th>\r\n  </tr>\r\n  </thead>\r\n  <tbody>\r\n\r\n  </tbody>\r\n</table>\r\n<div class=\"update-message\" *ngIf=\"showMessage\">\r\n  {{ updateMessage }}\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { DrinkService } from 'src/app/services/drink.service';\r\nimport { InventoryItemInterface } from '../../types/inventoryItem.interface';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Component({\r\n  selector: 'app-order-inventory',\r\n  templateUrl: './order-inventory.component.html',\r\n  styleUrls: ['./order-inventory.component.css']\r\n})\r\nexport class OrderInventoryComponent implements OnInit {\r\n  currentUnitsOnHand: InventoryItemInterface[] = []\r\n  postId: any;\r\n  items!: any;\r\n\r\n  public showMessage: boolean = false;\r\n  updateMessage: any = 'Updating... click \"Refresh\" to see updated units.'\r\n\r\n  constructor(\r\n    private drinkService: DrinkService,\r\n    private http: HttpClient\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  getCurrentUnitsOnHand() {\r\n    this.drinkService.getInventoryItems()\r\n      .subscribe(res => {\r\n        console.log('allCurrentItems: =====> ', res)\r\n\r\n\r\n        for (let key in res) {\r\n          console.log(key + \": \" + res[key].unitsOnHand)\r\n          if (res[key].unitsOnHand < 10) {\r\n            console.log(\"less than 10\")\r\n            res[key].unitsOnHand = 10\r\n          }\r\n        }\r\n\r\n\r\n    })\r\n  }\r\n\r\n  addAllUnits() {\r\n    console.log('AddAllUnits called')\r\n    this.showMessage = true;\r\n\r\n    const refillCount = 10;\r\n\r\n    this.http.put<InventoryItemInterface>('http://localhost:8080/inventoryItems', {id: 0, name: '', unitsOnHand: refillCount})\r\n    .subscribe(data => this.items = data.unitsOnHand );\r\n    // .subscribe((res) => {\r\n    //   this.postId = res;\r\n    // })\r\n\r\n  //   async function fetchData() {\r\n\r\n  //     const response = await fetch('http://localhost:3000/users/');\r\n  //     const data = await response.json();\r\n\r\n  //     data.forEach(obj: InventoryItemInterface => {\r\n  //         Object.entries(obj).forEach(([key, value]) => {\r\n  //             console.log(`${key} ${value}`);\r\n  //             if (value < 10 ) {\r\n  //               value = 10\r\n  //             }\r\n  //         });\r\n  //         console.log('-------------------');\r\n  //     });\r\n  // }\r\n\r\n  //   this.http.get<InventoryItemInterface>('http://localhost:8080/inventoryItems')\r\n  //     .subscribe((res: InventoryItemInterface) => {\r\n\r\n  //       // const response = await fetch('http://localhost:8080/inventoryItems/');\r\n  //       // const data = await response.json();\r\n\r\n  //       res.forEach((res: InventoryItemInterface) => {\r\n  //           Object.entries(res).forEach(([key, value]) => {\r\n  //               console.log(`${key} ${value}`);\r\n  //               if (value < 10) {\r\n  //                 value = 10\r\n  //               }\r\n  //           });\r\n  //           console.log('-------------------');\r\n  //           console.log(\"original items: \", res)\r\n  //       });\r\n  //   }\r\n\r\n\r\n\r\n\r\n    //   for (let keyName in JSON) {\r\n    //     let value = json[keyName]\r\n    //     if (value === '') {\r\n    //         json[keyName] = keyName\r\n    //     }\r\n    // }\r\n    // console.log(\"after changed items: \", this.items)\r\n\r\n\r\n    // const item1Body = { id: 1, name: 'Coffee', unitsOnHand: refillCount };\r\n    // this.http.put<InventoryItemInterface>('http://localhost:8080/inventoryItems/1', item1Body)\r\n    // .subscribe(data => this.postId = data.id );\r\n\r\n    // const item2Body = { id: 2, name: 'Decaf Coffee', unitsOnHand: refillCount };\r\n    // this.http.put<InventoryItemInterface>('http://localhost:8080/inventoryItems/2', item2Body)\r\n    // .subscribe(data => this.postId = data.id);\r\n\r\n    // const item3Body = { id: 3, name: 'Sugar', unitsOnHand: refillCount };\r\n    // this.http.put<InventoryItemInterface>('http://localhost:8080/inventoryItems/3', item3Body)\r\n    // .subscribe(data => this.postId = data.id);\r\n\r\n    // const item4Body = { id: 4, name: 'Cream', unitsOnHand: refillCount };\r\n    // this.http.put<InventoryItemInterface>('http://localhost:8080/inventoryItems/4', item4Body)\r\n    // .subscribe(data => this.postId = data.id);\r\n\r\n    // const item5Body = { id: 5, name: 'Steamed Milk', unitsOnHand: refillCount };\r\n    // this.http.put<InventoryItemInterface>('http://localhost:8080/inventoryItems/5', item5Body)\r\n    // .subscribe(data => this.postId = data.id);\r\n\r\n    // const item6Body = { id: 6, name: 'Foamed Milk', unitsOnHand: refillCount };\r\n    // this.http.put<InventoryItemInterface>('http://localhost:8080/inventoryItems/6', item6Body)\r\n    // .subscribe(data => this.postId = data.id);\r\n\r\n    // const item7Body = { id: 7, name: 'Espresso', unitsOnHand: refillCount };\r\n    // this.http.put<InventoryItemInterface>('http://localhost:8080/inventoryItems/7', item7Body)\r\n    // .subscribe(data => this.postId = data.id);\r\n\r\n    // const item8Body = { id: 8, name: 'Cocoa', unitsOnHand: refillCount };\r\n    // this.http.put<InventoryItemInterface>('http://localhost:8080/inventoryItems/8', item8Body)\r\n    // .subscribe(data => this.postId = data.id);\r\n\r\n    // const item9Body = { id: 9, name: 'Whipped Cream', unitsOnHand: refillCount };\r\n    // this.http.put<InventoryItemInterface>('http://localhost:8080/inventoryItems/9', item9Body)\r\n    // .subscribe(data => this.postId = data.id);\r\n\r\n    // this.ngOnInit();\r\n\r\n    //)}\r\n\r\n}}\r\n"]},"metadata":{},"sourceType":"module"}